                import java.util.ArrayList;
 
public class Knapsack {
 
    public static class Node {
        public int initialIndex; 
        public int size;
        public int value;
        public double preciousness;

        public Node(int ii, int s, int v, double p) {
            initialIndex = ii;
            size = s;
            value = v;
            preciousness = p;
        }
    }

    public static void main(String[] args) {
        int[] sizes  = new int[]{4, 3, 7, 4, 5, 6, 2, 1, 5, 3, 4, 5, 6, 7, 9, 2, 2, 1};
        int[] values = new int[]{6, 5, 4, 3, 2, 1, 2, 1, 6, 6, 6, 6, 6, 5, 4, 2, 1, 9};
        int x = 0;
        int stop = 70;
        while (x <= stop) {
            int capacity = x;
            ArrayList<Integer> ans = knapsack10(sizes, values, capacity);
            System.out.println("Profit with knapsack capacity " +
                    capacity + " (" + ans.get(ans.size() - 2) + " used) is $" + ans.get(ans.size() - 1));
            for (int i = 0; i < ans.size() - 2; i++) {
                System.out.println(sizes[ans.get(i)] + "-" + values[ans.get(i)]);
            }
            x++;
            System.out.println("--------------------------------------------------");
        }
    }

    public static ArrayList<Integer> knapsack10(int[] S, int[] V, int capacity) {
        int c = capacity;
        Node[] P = new Node[S.length];
        for (int i = 0; i < S.length; i++) {
            P[i] = new Node(i, S[i], V[i], V[i] * 1.0 / S[i]);
        }
        for (int i = 0; i < S.length; i++) {
            for (int j = 0; j < S.length - 1; j++) {
                if (P[j].preciousness < P[j + 1].preciousness) {
                    Node temp = P[j];
                    P[j] = P[j + 1];
                    P[j + 1] = temp;
                }
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        int profit = 0;
        for (int i = 0; i < S.length; i++) {
            if (capacity >= P[i].size) {
                profit += P[i].value;
                capacity -= P[i].size;
                ans.add(P[i].initialIndex);
            }
        }
        ans.add(c - capacity);
        ans.add(profit);
        return ans;
    }

}
